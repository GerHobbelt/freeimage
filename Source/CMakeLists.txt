# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Subdirectory: LibJPEG
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/LibJPEG")
else()
	set(CMAKE_FOLDER LibJPEG)
endif()
add_subdirectory(LibJPEG)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: LibJXR
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/LibJXR")
else()
	set(CMAKE_FOLDER LibJXR)
endif()
add_subdirectory(LibJXR)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: LibOpenJPEG
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/LibOpenJPEG")
else()
	set(CMAKE_FOLDER LibOpenJPEG)
endif()
add_subdirectory(LibOpenJPEG)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: LibPNG
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/LibPNG")
else()
	set(CMAKE_FOLDER LibPNG)
endif()
add_subdirectory(LibPNG)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: LibRawLite
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/LibRawLite")
else()
	set(CMAKE_FOLDER LibRawLite)
endif()
add_subdirectory(LibRawLite)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: LibTIFF4
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/LibTIFF4")
else()
	set(CMAKE_FOLDER LibTIFF4)
endif()
add_subdirectory(LibTIFF4)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: LibWebP
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/LibWebP")
else()
	set(CMAKE_FOLDER LibWebP)
endif()
add_subdirectory(LibWebP)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: OpenEXR
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/OpenEXR")
else()
	set(CMAKE_FOLDER OpenEXR)
endif()
add_subdirectory(OpenEXR)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Subdirectory: ZLib
set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
if(CMAKE_FOLDER)
	set(CMAKE_FOLDER "${CMAKE_FOLDER}/ZLib")
else()
	set(CMAKE_FOLDER ZLib)
endif()
add_subdirectory(ZLib)
set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

# Target: freeimage
set(freeimage_SOURCES
	"FreeImage/BitmapAccess.cpp"
	"FreeImage/CacheFile.cpp"
	"FreeImage/ColorLookup.cpp"
	"FreeImage/Conversion.cpp"
	"FreeImage/Conversion16_555.cpp"
	"FreeImage/Conversion16_565.cpp"
	"FreeImage/Conversion24.cpp"
	"FreeImage/Conversion32.cpp"
	"FreeImage/Conversion4.cpp"
	"FreeImage/Conversion8.cpp"
	"FreeImage/ConversionFloat.cpp"
	"FreeImage/ConversionRGB16.cpp"
	"FreeImage/ConversionRGBA16.cpp"
	"FreeImage/ConversionRGBAF.cpp"
	"FreeImage/ConversionRGBF.cpp"
	"FreeImage/ConversionType.cpp"
	"FreeImage/ConversionUINT16.cpp"
	"FreeImage/FreeImage.cpp"
	"FreeImage/FreeImageIO.cpp"
	"FreeImage/GetType.cpp"
	"FreeImage/Halftoning.cpp"
	"FreeImage/J2KHelper.cpp"
	"FreeImage/LFPQuantizer.cpp"
	"FreeImage/MNGHelper.cpp"
	"FreeImage/MemoryIO.cpp"
	"FreeImage/MultiPage.cpp"
	"FreeImage/NNQuantizer.cpp"
	"FreeImage/PSDParser.cpp"
	"FreeImage/PixelAccess.cpp"
	"FreeImage/Plugin.cpp"
	"FreeImage/PluginBMP.cpp"
	"FreeImage/PluginCUT.cpp"
	"FreeImage/PluginDDS.cpp"
	"FreeImage/PluginEXR.cpp"
	"FreeImage/PluginG3.cpp"
	"FreeImage/PluginGIF.cpp"
	"FreeImage/PluginHDR.cpp"
	"FreeImage/PluginICO.cpp"
	"FreeImage/PluginIFF.cpp"
	"FreeImage/PluginJ2K.cpp"
	"FreeImage/PluginJNG.cpp"
	"FreeImage/PluginJP2.cpp"
	"FreeImage/PluginJPEG.cpp"
	"FreeImage/PluginJXR.cpp"
	"FreeImage/PluginKOALA.cpp"
	"FreeImage/PluginMNG.cpp"
	"FreeImage/PluginPCD.cpp"
	"FreeImage/PluginPCX.cpp"
	"FreeImage/PluginPFM.cpp"
	"FreeImage/PluginPICT.cpp"
	"FreeImage/PluginPNG.cpp"
	"FreeImage/PluginPNM.cpp"
	"FreeImage/PluginPSD.cpp"
	"FreeImage/PluginRAS.cpp"
	"FreeImage/PluginRAW.cpp"
	"FreeImage/PluginSGI.cpp"
	"FreeImage/PluginTARGA.cpp"
	"FreeImage/PluginTIFF.cpp"
	"FreeImage/PluginWBMP.cpp"
	"FreeImage/PluginWebP.cpp"
	"FreeImage/PluginXBM.cpp"
	"FreeImage/PluginXPM.cpp"
	"FreeImage/TIFFLogLuv.cpp"
	"FreeImage/ToneMapping.cpp"
	"FreeImage/WuQuantizer.cpp"
	"FreeImage/ZLibInterface.cpp"
	"FreeImage/tmoColorConvert.cpp"
	"FreeImage/tmoDrago03.cpp"
	"FreeImage/tmoFattal02.cpp"
	"FreeImage/tmoReinhard05.cpp"
	"Metadata/Exif.cpp"
	"Metadata/FIRational.cpp"
	"Metadata/FreeImageTag.cpp"
	"Metadata/IPTC.cpp"
	"Metadata/TagConversion.cpp"
	"Metadata/TagLib.cpp"
	"Metadata/XTIFF.cpp"
	"FreeImageToolkit/BSplineRotate.cpp"
	"FreeImageToolkit/Background.cpp"
	"FreeImageToolkit/Channels.cpp"
	"FreeImageToolkit/ClassicRotate.cpp"
	"FreeImageToolkit/Colors.cpp"
	"FreeImageToolkit/CopyPaste.cpp"
	"FreeImageToolkit/Display.cpp"
	"FreeImageToolkit/Flip.cpp"
	"FreeImageToolkit/JPEGTransform.cpp"
	"FreeImageToolkit/MultigridPoissonSolver.cpp"
	"FreeImageToolkit/Rescale.cpp"
	"FreeImageToolkit/Resize.cpp"
	cmake.toml
)

add_library(freeimage)

target_sources(freeimage PRIVATE ${freeimage_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${freeimage_SOURCES})

target_compile_definitions(freeimage PUBLIC
	FREEIMAGE_LIB
	_LIB
)

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_options(freeimage PUBLIC
		-Wno-everything
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(freeimage PUBLIC
		-Wno-everything
	)
endif()

if(MSVC) # msvc
	target_compile_options(freeimage PUBLIC
		"/W0"
	)
endif()

target_include_directories(freeimage PUBLIC
	.
)

target_link_libraries(freeimage PUBLIC
	libjpeg
	libjxr
	libopenjpeg
	libpng
	librawlite
	libtiff4
	libwebp
	openexr
	zlib
)

target_include_directories(freeimage PUBLIC
	"FreeImagePlus/"
)

# Target: freeimagelib
if(BUILD_FREE_IMAGE_LIB) # build-free-image-lib
	set(freeimagelib_SOURCES
		"FreeImage/BitmapAccess.cpp"
		"FreeImage/ColorLookup.cpp"
		"FreeImage/ConversionRGBA16.cpp"
		"FreeImage/ConversionRGBAF.cpp"
		"FreeImage/FreeImage.cpp"
		"FreeImage/FreeImageIO.cpp"
		"FreeImage/GetType.cpp"
		"FreeImage/LFPQuantizer.cpp"
		"FreeImage/MemoryIO.cpp"
		"FreeImage/PixelAccess.cpp"
		"FreeImage/NNQuantizer.cpp"
		"FreeImage/WuQuantizer.cpp"
		"FreeImage/Conversion.cpp"
		"FreeImage/Conversion16_555.cpp"
		"FreeImage/Conversion16_565.cpp"
		"FreeImage/Conversion24.cpp"
		"FreeImage/Conversion32.cpp"
		"FreeImage/Conversion4.cpp"
		"FreeImage/Conversion8.cpp"
		"FreeImage/ConversionFloat.cpp"
		"FreeImage/ConversionRGB16.cpp"
		"FreeImage/ConversionRGBF.cpp"
		"FreeImage/ConversionType.cpp"
		"FreeImage/ConversionUINT16.cpp"
		"FreeImage/Halftoning.cpp"
		"FreeImage/tmoColorConvert.cpp"
		"FreeImage/tmoDrago03.cpp"
		"FreeImage/tmoFattal02.cpp"
		"FreeImage/tmoReinhard05.cpp"
		"FreeImage/ToneMapping.cpp"
		"FreeImage/J2KHelper.cpp"
		"FreeImage/MNGHelper.cpp"
		"FreeImage/Plugin.cpp"
		"FreeImage/PluginBMP.cpp"
		"FreeImage/PluginCUT.cpp"
		"FreeImage/PluginDDS.cpp"
		"FreeImage/PluginEXR.cpp"
		"FreeImage/PluginG3.cpp"
		"FreeImage/PluginGIF.cpp"
		"FreeImage/PluginHDR.cpp"
		"FreeImage/PluginICO.cpp"
		"FreeImage/PluginIFF.cpp"
		"FreeImage/PluginJ2K.cpp"
		"FreeImage/PluginJNG.cpp"
		"FreeImage/PluginJP2.cpp"
		"FreeImage/PluginJPEG.cpp"
		"FreeImage/PluginJXR.cpp"
		"FreeImage/PluginKOALA.cpp"
		"FreeImage/PluginMNG.cpp"
		"FreeImage/PluginPCD.cpp"
		"FreeImage/PluginPCX.cpp"
		"FreeImage/PluginPFM.cpp"
		"FreeImage/PluginPICT.cpp"
		"FreeImage/PluginPNG.cpp"
		"FreeImage/PluginPNM.cpp"
		"FreeImage/PluginPSD.cpp"
		"FreeImage/PluginRAS.cpp"
		"FreeImage/PluginRAW.cpp"
		"FreeImage/PluginSGI.cpp"
		"FreeImage/PluginTARGA.cpp"
		"FreeImage/PluginTIFF.cpp"
		"FreeImage/PluginWBMP.cpp"
		"FreeImage/PluginWebP.cpp"
		"FreeImage/PluginXBM.cpp"
		"FreeImage/PluginXPM.cpp"
		"FreeImage/PSDParser.cpp"
		"FreeImage/TIFFLogLuv.cpp"
		"FreeImage/CacheFile.cpp"
		"FreeImage/MultiPage.cpp"
		"FreeImage/ZLibInterface.cpp"
		"Metadata/Exif.cpp"
		"Metadata/FIRational.cpp"
		"Metadata/FreeImageTag.cpp"
		"Metadata/IPTC.cpp"
		"Metadata/TagConversion.cpp"
		"Metadata/TagLib.cpp"
		"Metadata/XTIFF.cpp"
		"FreeImageToolkit/Background.cpp"
		"FreeImageToolkit/BSplineRotate.cpp"
		"FreeImageToolkit/Channels.cpp"
		"FreeImageToolkit/ClassicRotate.cpp"
		"FreeImageToolkit/Colors.cpp"
		"FreeImageToolkit/CopyPaste.cpp"
		"FreeImageToolkit/Display.cpp"
		"FreeImageToolkit/Flip.cpp"
		"FreeImageToolkit/JPEGTransform.cpp"
		"FreeImageToolkit/MultigridPoissonSolver.cpp"
		"FreeImageToolkit/Rescale.cpp"
		"FreeImageToolkit/Resize.cpp"
		cmake.toml
	)

	add_library(freeimagelib)

	target_sources(freeimagelib PRIVATE ${freeimagelib_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${freeimagelib_SOURCES})

	target_compile_definitions(freeimagelib PUBLIC
		FREEIMAGE_LIB
		_LIB
	)

	if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
		target_compile_options(freeimagelib PUBLIC
			-Wno-everything
		)
	endif()

	if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
		target_compile_options(freeimagelib PUBLIC
			-Wno-everything
		)
	endif()

	if(MSVC) # msvc
		target_compile_options(freeimagelib PUBLIC
			"/W0"
		)
	endif()

	target_include_directories(freeimagelib PUBLIC
		.
	)

	target_link_libraries(freeimagelib PUBLIC
		libjpeg
		libjxr
		libopenjpeg
		libpng
		librawlite
		libtiff4
		libwebp
		openexr
		zlib
	)

endif()
