cmake_minimum_required(VERSION 3.1)
cmake_policy(VERSION 3.1)

if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.12)
  # GAB: Allow new behavior for find_package with <LIBNAME>_ROOT defined
  cmake_policy(SET CMP0074 NEW)
endif()

if (DEFINED ZLIB_ROOT)
  list(APPEND CMAKE_FIND_ROOT_PATH ${ZLIB_ROOT})
endif()

if (DEFINED PNG_ROOT)
  list(APPEND CMAKE_FIND_ROOT_PATH ${PNG_ROOT})
endif()

if (DEFINED JPEG_ROOT)
  list(APPEND CMAKE_FIND_ROOT_PATH ${JPEG_ROOT})
endif()

if (EMSCRIPTEN)
    # Target C++ 17
    set(CMAKE_CXX_STANDARD 17)
    # Fully disable exceptions
    add_compile_options(-fno-exceptions)
    # Emscripten Strict Mode
    add_compile_options(-s STRICT=1)
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  add_compile_options(-fno-switch)
endif()

  # FreeImage version
SET( FREEIMAGE_VERSION_MAIN 3)
SET( FREEIMAGE_VERSION_MIDDLE 16)
SET( FREEIMAGE_VERSION_LOWER 0)
SET( FREEIMAGE_VERSION_MINOR 0)
SET( FREEIMAGE_VERSION ${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER} )
SET( FREEIMAGE_VERSION_BUILD ${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER}.${FREEIMAGE_VERSION_MINOR} )

OPTION(ENABLE_PNG "Enable PNG support" 1)
OPTION(ENABLE_JPEG "Enable JPEG support" 1)
OPTION(ENABLE_TIFF "Enable TIFF support" 0)
OPTION(ENABLE_WEBP "Enable WebP support" 0)
OPTION(ENABLE_RAW "Enable RAW support" 0)
OPTION(ENABLE_OPENJP "Enable OpenJPEG support" 0)
OPTION(ENABLE_TESTS "Make built in tests" 0)
OPTION(FREEIMAGE_DYNAMIC_C_RUNTIME "If ON build FreeImage with dynamicly linked C/C++ runtime. If OFF FreeImage is staticly linked with C/C++ runtime.")

if (NOT BUILD_SHARED_LIBS)
  set(FREEIMAGE_BUILD_STATIC 1)
  set(FREEIMAGE_BUILD_DLL 0)
else()
  set(FREEIMAGE_BUILD_STATIC 0)
  set(FREEIMAGE_BUILD_DLL 1)
endif()

IF(NOT FREEIMAGE_DYNAMIC_C_RUNTIME)
  # Set to link staticly with runtime
  set(CMAKE_USER_MAKE_RULES_OVERRIDE
          ${CMAKE_CURRENT_SOURCE_DIR}/c_flag_overrides.cmake)
  set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX
          ${CMAKE_CURRENT_SOURCE_DIR}/cxx_flag_overrides.cmake)
ENDIF(NOT FREEIMAGE_DYNAMIC_C_RUNTIME)

project (FreeImage)
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

# Check parameters
INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckTypeSize)

# Find packages
FIND_PACKAGE(ZLIB REQUIRED)
SET(LIBS ${ZLIB_LIBRARIES})
IF(ENABLE_PNG)
  FIND_PACKAGE(PNG REQUIRED)
  SET(LIBS ${LIBS} ${PNG_LIBRARIES})
  ADD_DEFINITIONS(${PNG_DEFINITIONS})
  ADD_DEFINITIONS(-DENABLE_PNG)
ENDIF()
IF(ENABLE_JPEG)
  FIND_PACKAGE(JPEG REQUIRED)
  SET(LIBS ${LIBS} ${JPEG_LIBRARIES})
  ADD_DEFINITIONS(-DENABLE_JPEG)
ENDIF()
IF(ENABLE_TIFF)
  FIND_PACKAGE(TIFF REQUIRED)
  SET(LIBS ${LIBS} ${TIFF_LIBRARIES})
  ADD_DEFINITIONS(-DENABLE_TIFF)
ENDIF()
IF(ENABLE_WEBP)
  find_path(WEBP_INCLUDE_DIR mux_types.h)
  find_library(WEBP_LIBRARIES NAMES webp libwebp)
  SET(LIBS ${LIBS} ${WEBP_LIBRARIES})
  find_library(WEBP_MUX_LIBRARIES NAMES webpmux libwebpmux)
  SET(LIBS ${LIBS} ${WEBP_MUX_LIBRARIES})
  ADD_DEFINITIONS(-DENABLE_WEBP)
ENDIF()
IF(ENABLE_RAW)
  find_path(RAW_INCLUDE_DIR libraw.h)
  find_library(RAW_LIBRARIES NAMES raw_static libraw_static)
  SET(LIBS ${LIBS} ${RAW_LIBRARIES})
ENDIF()
IF(ENABLE_OPENJP)
  find_path(OPENJP_INCLUDE_DIR openjpeg.h)
  find_library(OPENJP_LIBRARIES NAMES openjp2 libopenjp2)
  SET(LIBS ${LIBS} ${OPENJP_LIBRARIES})
ENDIF()

IF(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
ENDIF()

# Set default output dirs
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(INSTALL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE PATH "Installation directory for executables")
set(INSTALL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH "Installation directory for libraries")
set(INSTALL_INC_DIR "${CMAKE_INSTALL_PREFIX}/include" CACHE PATH "Installation directory for headers")
set(INSTALL_MAN_DIR "${CMAKE_INSTALL_PREFIX}/share/man" CACHE PATH "Installation directory for manual pages")
set(INSTALL_PKGCONFIG_DIR "${CMAKE_INSTALL_PREFIX}/share/pkgconfig" CACHE PATH "Installation directory for pkgconfig (.pc) files")

# Set libraries for static or DLL build
IF(FREEIMAGE_BUILD_STATIC)
  SET(FREEIMAGE_BUILD_FLAGS -DFREEIMAGE_LIB)
ELSE(FREEIMAGE_BUILD_STATIC)
  SET(FREEIMAGE_LIBRARIES FreeImage)
  SET(FREEIMAGE_BUILD_DLL ON)
ENDIF(FREEIMAGE_BUILD_STATIC)

SET(FREEIMAGE_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/Source)
SET(FREEIMAGE_LIBRARY_DIRS ${CMAKE_BINARY_DIR}/Lib)

add_subdirectory(Source)

IF(ENABLE_TESTS)
  ENABLE_TESTING()
  add_subdirectory(TestAPI)
ENDIF()

