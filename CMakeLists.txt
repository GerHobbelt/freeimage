cmake_minimum_required(VERSION 3.10.2)

if (CMAKE_VERSION VERSION_GREATER_EQUAL 3.12)
  # GAB: Allow new behavior for find_package with <LIBNAME>_ROOT defined
  cmake_policy(SET CMP0074 NEW)
endif()

if (DEFINED ZLIB_ROOT)
  list(APPEND CMAKE_FIND_ROOT_PATH ${ZLIB_ROOT})
endif()

if (DEFINED PNG_ROOT)
  list(APPEND CMAKE_FIND_ROOT_PATH ${PNG_ROOT})
endif()

if (DEFINED JPEG_ROOT)
  list(APPEND CMAKE_FIND_ROOT_PATH ${JPEG_ROOT})
endif()

  # FreeImage version
SET( FREEIMAGE_VERSION_MAIN 3)
SET( FREEIMAGE_VERSION_MIDDLE 16)
SET( FREEIMAGE_VERSION_LOWER 0)
SET( FREEIMAGE_VERSION_MINOR 0)
SET( FREEIMAGE_VERSION ${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER} )
SET( FREEIMAGE_VERSION_BUILD ${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER}.${FREEIMAGE_VERSION_MINOR} )

OPTION(ENABLE_PNG "Enable PNG support" 1)
OPTION(ENABLE_JPEG "Enable JPEG support" 1)
OPTION(ENABLE_TIFF "Enable TIFF support" 0)
OPTION(ENABLE_WEBP "Enable WebP support" 0)
OPTION(ENABLE_RAW "Enable RAW support" 0)
OPTION(ENABLE_OPENJP "Enable OpenJPEG support" 0)
OPTION(ENABLE_TESTS "Make built in tests" 0)

if (NOT BUILD_SHARED_LIBS)
  set(FREEIMAGE_BUILD_STATIC 1)
  set(FREEIMAGE_BUILD_DLL 0)
else()
  set(FREEIMAGE_BUILD_STATIC 0)
  set(FREEIMAGE_BUILD_DLL 1)
endif()

project (FreeImage)
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

set(CMAKE_DEBUG_POSTFIX "d")

if (("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang"))
  add_compile_options(-Wno-format)
  add_compile_options(-Wno-unused-result)
  add_compile_options(-Wno-switch)
  add_compile_options(-Wno-unused-value)
  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    add_compile_options(-Wno-logical-op-parentheses)
    add_compile_options(-Wno-unused-private-field)
  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    add_compile_options(-Wno-clobbered)
    add_compile_options(-Wno-implicit-fallthrough)
    add_compile_options(-Wno-maybe-uninitialized)
  endif()
  add_compile_options(-Wno-sign-compare)
  add_compile_options(-Wno-unused-parameter)
  add_compile_options(-Wno-unused-variable)
  add_compile_options(-Wno-unused-const-variable)
  add_compile_options(-Wno-unused-private-field)
  add_compile_options(-Wno-misleading-indentation)
  add_compile_options(-Wno-type-limits)
  add_compile_options(-Wno-ignored-qualifiers)
  add_compile_options(-Wno-cast-function-type)
  add_compile_options(-Wno-parentheses)
endif()

# Check parameters
INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckTypeSize)

# Find packages
FIND_PACKAGE(ZLIB REQUIRED)
SET(LIBS ${ZLIB_LIBRARIES})
IF(ENABLE_PNG)
  FIND_PACKAGE(PNG REQUIRED)
  SET(LIBS ${LIBS} ${PNG_LIBRARIES})
  ADD_DEFINITIONS(${PNG_DEFINITIONS})
  ADD_DEFINITIONS(-DENABLE_PNG)
ENDIF()
IF(ENABLE_JPEG)
  FIND_PACKAGE(JPEG REQUIRED)
  SET(LIBS ${LIBS} ${JPEG_LIBRARIES})
  ADD_DEFINITIONS(-DENABLE_JPEG)
ENDIF()
IF(ENABLE_TIFF)
  FIND_PACKAGE(TIFF REQUIRED)
  SET(LIBS ${LIBS} ${TIFF_LIBRARIES})
  ADD_DEFINITIONS(-DENABLE_TIFF)
ENDIF()
IF(ENABLE_WEBP)
  find_path(WEBP_INCLUDE_DIR mux_types.h)
  find_library(WEBP_LIBRARIES NAMES webp libwebp)
  SET(LIBS ${LIBS} ${WEBP_LIBRARIES})
  find_library(WEBP_MUX_LIBRARIES NAMES webpmux libwebpmux)
  SET(LIBS ${LIBS} ${WEBP_MUX_LIBRARIES})
  ADD_DEFINITIONS(-DENABLE_WEBP)
ENDIF()
IF(ENABLE_RAW)
  find_path(RAW_INCLUDE_DIR libraw.h)
  find_library(RAW_LIBRARIES NAMES raw_static libraw_static)
  SET(LIBS ${LIBS} ${RAW_LIBRARIES})
ENDIF()
IF(ENABLE_OPENJP)
  find_path(OPENJP_INCLUDE_DIR openjpeg.h)
  find_library(OPENJP_LIBRARIES NAMES openjp2 libopenjp2)
  SET(LIBS ${LIBS} ${OPENJP_LIBRARIES})
ENDIF()

IF(MSVC OR (WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES "[Cc][Ll][Aa][Nn][Gg]" AND NOT MINGW))
  add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)
  if (MSVC)
    add_definitions("/wd4477 /wd4018")
  else()
    add_definitions("-Wno-microsoft-template")
    add_definitions("-Wno-typename-missing")
  endif()
ENDIF()

# Set default output dirs
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(INSTALL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE PATH "Installation directory for executables")
set(INSTALL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH "Installation directory for libraries")
set(INSTALL_INC_DIR "${CMAKE_INSTALL_PREFIX}/include" CACHE PATH "Installation directory for headers")
set(INSTALL_MAN_DIR "${CMAKE_INSTALL_PREFIX}/share/man" CACHE PATH "Installation directory for manual pages")
set(INSTALL_PKGCONFIG_DIR "${CMAKE_INSTALL_PREFIX}/share/pkgconfig" CACHE PATH "Installation directory for pkgconfig (.pc) files")

# Set libraries for static or DLL build
IF(FREEIMAGE_BUILD_STATIC)
  SET(FREEIMAGE_BUILD_FLAGS -DFREEIMAGE_LIB)
ELSE(FREEIMAGE_BUILD_STATIC)
  SET(FREEIMAGE_LIBRARIES FreeImage)
  SET(FREEIMAGE_BUILD_DLL ON)
ENDIF(FREEIMAGE_BUILD_STATIC)

SET(FREEIMAGE_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/Source)
SET(FREEIMAGE_LIBRARY_DIRS ${CMAKE_BINARY_DIR}/Lib)

add_subdirectory(Source)

IF(ENABLE_TESTS)
  ENABLE_TESTING()
  add_subdirectory(TestAPI)
ENDIF()

