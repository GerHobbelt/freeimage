Date: Wed, 1 Oct 2014 11:12:37 +0100
From: Dejan Latinovic <Dejan.Latinovic@imgtec.com>
Subject: fix for skimage

Package skimage FTBFS on mips (and other BE arch except ppc), on testing.

> ======================================================================
> FAIL: test_freeimage.test_imread
> ----------------------------------------------------------------------
> Traceback (most recent call last):
>   File "/usr/lib/python2.7/dist-packages/nose/case.py", line 197, in runTest
>     self.test(*self.arg)
>   File "/usr/lib/python2.7/dist-packages/numpy/testing/decorators.py", line 146, in skipper_func
>     return f(*args, **kwargs)
>   File "/«PKGBUILDDIR»/debian/tmp/usr/lib/python2.7/dist-packages/skimage/io/tests/test_freeimage.py", line 38, in
test_imread
>     assert all(img[274, 135] == [0, 130, 253])
> AssertionError
>
> ----------------------------------------------------------------------
> Ran 1033 tests in 1239.576s
>
> FAILED (SKIP=20, failures=1)

Test reads info from color.png with coordinates [274, 135].  Obtained result is
[253 130 0], instead of expected [0, 130, 253].  I seems that color format is
twisted (RGB -> BGR) during loading of PNG.  The reason for that is a fact that
big endian was not detected right in FreeImage.h.

Patch that improves big endian detection in freeimage is attached.

Beside that, freeimage FTBFS on amd64, mips, mipsel and probably other archs
because of missing build dependency.  Patch that adds this dependency is
attached.

Using freeimage built with patches below, I was able to build skimage
successfully with all tests passing.

--- freeimage.orig/Source/FreeImage.h
+++ freeimage/Source/FreeImage.h
@@ -73,6 +73,7 @@
 // If your big endian system isn't being detected, add an OS specific check
 #if (defined(BYTE_ORDER) && BYTE_ORDER==BIG_ENDIAN) || \
 	(defined(__BYTE_ORDER) && __BYTE_ORDER==__BIG_ENDIAN) || \
+	(defined(__BYTE_ORDER__) && __BYTE_ORDER__==__ORDER_BIG_ENDIAN__) || \
 	defined(__BIG_ENDIAN__)
 #define FREEIMAGE_BIGENDIAN
 #endif // BYTE_ORDER
